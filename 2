#pragma once
#include <iostream>
#include <string.h>
#include <vector>
#include <map>
using namespace std;

class Association;
class Member;
class Race;
class Track;
class League;
struct Mountain;

class Association
{

    public:
		//	Constructor of mountain running associaition all we need is a name.
        Association(string Name);

		//	When the deconstructor is invoked all the information
		//	of the class is going to be stored to a txt file
        ~Association();

		//	There are two methods to add one of the below, 
		//	one can either do all of it manually, or when the data
		//	is being read from txt files, the methods return the id
		//	of the thing being added
        unsigned int Add_Member(Member&);    unsigned int Add_Member();
        unsigned int Add_Track(Track&);     unsigned int Add_Track();
        unsigned int Add_Race(Race&);       unsigned int Add_Race();
        unsigned int Add_League(League&);   unsigned int Add_League();

		//	The same goes for the mountain structure, there are two
		//	ways of adding one
        void Add_Mountain(Mountain&);
		void Add_Mountain();

		//	Those methods are a way to interactively change the
		//	parameters within the stored classes
		//	For example change participants of the race, change
		//	someones membership, or progress a league or finish a race
		//	Those however have limitations, example: if a race has 
		//	finished we cannot change who participated in the race, 
		//	unless we want to remove that person from the system as a whole
        void Edit_Race(unsigned int id);
        void Edit_League(unsigned int id);
		void Edit_Member(unsigned int id);
		void Edit_Track(unsigned int id);

		//	Prints the information on the classes the associaition has
        int Print_Unfinished_Races(); // the int is for number of races 
		int Print_Finished_Races(); 
		int Print_All_Races();
        void Print_Members();
        void Print_Tracks();
		void Print_Leagues();
		void Print_Mountains();

    private:
		//	Name of the associaition
		string Name;

		//	The main class has a map of all the objects added to it
		//	all elements of the map are pointers with keys being the ids
		//	of the objects, so when adding objects manually we
		//	need to dynamically alocate them using new
        map<unsigned int, Member*> members;
        map<unsigned int, Track*> tracks;
        map<unsigned int, Race*> races;
		map<unsigned int, League*> leagues;

		//	Since Mountain is a struct we do not need to use 
		//	ids or a map for it
		vector<Mountain*> mountains; 

};

struct Mountain
{
	string Name;
	string Country;

	//	Map of Track object pointers, that are assigned
	//	when constructing a Track object, the key is the 
	//	Track id
    map<unsigned int, Track*> mountains_tracks;

	//	0 - lowest point ; 1 - highest point
	int elevation[2]; 
};

class Member
{
	friend Association;

    public:
		//	For the constructor all one needs are those parameters or
		//	simply use the copy constructor. However I cannot see any
		//	use for the copy construtor
        Member(string name, int age, char gender = '-', int membership = 1);
        Member(const Member&);

		//	The deconstructor of Member object, removes the pointers pointing
		//	to it the object from other classes like League, Race, Track
        ~Member();
    
		//	Prints the information about the member and
		//	the names and ids of the races he/she has taken part in
        void Print() const;

		//	This method calculates the performance of the runner
		//	Based on the time he/she gets on different races
        long Calculate_performance();

		//	Methods that change the membership of the runner
        void Cancel_membership();
        void Gold_membership();
        void Standard_membership();

		//	increases age by one
        unsigned int operator++();

		//	Adds/Removes a Race object pointer to/from the 
		//	Participation parameter, which is a map of Race 
		//	object pointers where the key is the id of the race
        void Add_race(const Race &);
        void Remove_race(const Race&); void Remove_race(const unsigned int);

		//	Find the race if the Member took part in it
		//	either do it by id of race or its object
        bool Find_race(const Race&) const; bool Find_race(const unsigned int) const;

	private:
		//	the static parameter Ids keeps track of how
		//	many objects of class Member were created,
		//	and it is used to assign the Id parameter.
		//	This is done so that there arent people with 
		//	the same id, if the class is loaded from txt file
		//	the parameter Ids will take the highest value there is
        static unsigned int Ids;
		const unsigned int Id;

        const string Name;
        int Age;
        const char Gender;

		//	0 - no membership; 1 - standard; 2 - gold
        unsigned int Membership; 
		//	only for gold membership
        long Performance_index; 

		//	This is a map of pointers of races in which
		//	the Member took part int, with
		//	key being the id of the race.
        map<unsigned int, Race*> Participation;

		//	gets Membership parameter
        unsigned int get_membership() const;

		//	gets id of member
        unsigned int get_id() const;

		// checks for any participation
        bool empty() const;     
		
};

class Track
{
	friend Association;
    friend Race;
    struct Best
    {
        float time;
        Member* runner; 
    };
    private:
		//	The static paramater Ids work pretty much
		//	the same as in class Member
        static unsigned int Ids;
		const unsigned int Id;

        const string Name;
		const Mountain *Where; // On what mountain is the track
        unsigned int Difficulty; // ranges from 1 - 10
        double Length; // in kilometers
		map<unsigned int, Race*> Schedule; // Schdule of past, present and future races
        double Average_time;
        Best Best_time; // Structure of the track's record time 
    public:
        Track(string name, Mountain mountain, int length, unsigned int difficulty = 5); // normal constructor
        Track(const Track&); // copy constructor
        ~Track();

        void Print() const; // Display information about the track
        void Print_Best() const; // Displays more information on best runner
		void Print_future_race() const; // prints unfinished races
        void Add_race(const Race&); // adds race to the map
									//
		// removing a race may also remove the best runner
        void Remove_race(const Race&); 
        void Remove_race(const unsigned int);

        double operator-=(double); // decreases the length
        double operator+=(double); // increases the length
        unsigned int operator++(); // increase the difficulty
        unsigned int operator--(); // decrease the difficulty
    private:
        void Finish_race(unsigned int); // Used only from object class Race
        Member* search_for_best(); // If the best runner or the race he was in was removed
        double Recalculate_average(); // after a race is finished or destroyed the average time has to change
        int& get_diff(); int& get_length(); int& get_average(); // gets reference to parameters
        const unsigned int get_id();
};

class Race
{
	friend Association;
    struct Participants
    {
        map<unsigned int, Member*> Runners;
        vector<unsigned int> Places;
        vector<double> Times;
        int Number_of_runners;
        double Average_time;
        double winner_time;
    };
    private:
        static unsigned int Ids;
		const unsigned int Id;
        const string Name;
        Track *Where;
        Participants race_participants;
        Member *Winner;
        bool finished;
    public:
        Race(string Name, Track *where);
        Race(const Race&);
        ~Race();
        
        void Print() const; // Displays info
        void Finish_race(); // finishes race and calculates places, winner, avg_time etc.

        void Add_runner(const Member&);
        void Remove_runner(const Member&);
        void Remove_runner(const unsigned int);
        void operator=(const Track&); // reaassigns the track
    private:
        const unsigned int get_id();
        bool Is_finished() const; // checks if the race is finished
        void Calculate_average(); // calculates average time
        void Assign_places(); // assigns places based on runners's times
        void Declare_winner(); // when race is finished
};

class League
{
	friend Association;
    private:
        static unsigned int Ids;
		const unsigned int Id;
        const string Name;
        const string Reward;
        map<unsigned int, Member*> League_Runners;
        map<unsigned int, Race*> League_Races;
        unsigned int number_of_races; // max 5 races a league
        Member *Winner;
        bool In_progress; // when its 1 no more runners or races can be adeed
        bool finished; // when its 1 the league is over
    public:
        League(string name, string Reward);
        League(const League&);
        ~League();

        void Add_Race(const Race&);
        void Remove_Race(const Race&); void Remove_Race(const unsigned int);
        void Add_runner(const Member&);
        void Remove_runner(const Member&); void Remove_runner(const unsigned int);
        void Start_League(); // stops from edditing the league
        void Next_stage(); // finishes next race, or finishes league
    private:
        void Declare_winner(); // declares winner based on average time in all races
        const unsigned int get_id();

};
